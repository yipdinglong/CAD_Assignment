AWSTemplateFormatVersion: '2010-09-09'
Parameters:

  DBPassword:
    Type: String
    NoEcho: true
    Description: The password for the RDS database

  DBUsername:
    Type: String
    Description: The username for the RDS database

Resources:

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: lostandfoundb
      Engine: mysql
      EngineVersion: 8.0
      DBInstanceClass: db.t2.micro
      VPCSecurityGroups:
        - !Ref MyDBSecurityGroup
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 20
      StorageType: gp2
      PubliclyAccessible: true

  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS database
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  MyDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
                        - 0
                        - !GetAZs
                          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
                        - 1
                        - !GetAZs
                          Ref: 'AWS::Region'
      MapPublicIpOnLau6Ech: true

  VpcId:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true   

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VpcId
      InternetGatewayId: !Ref InternetGateway

  MainRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref MainRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref MainRouteTable

  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  MySNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: 'Newly Reported Item'
      TopicName: 'New-Reported-Item'

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: my-security-group
      GroupDescription: My security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0      
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  MyIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AllowSNSAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:*"
                Resource: "*"

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: ec2-instance-profile
      Path: /
      Roles: 
       - !Ref MyIAMRole
    
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0dfcb1ef8550277af
      InstanceType: t2.micro
      IamInstanceProfile: !Ref Ec2InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'  
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref EC2SecurityGroup
      UserData:
       Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y gcc-c++ make
          curl -sL https://rpm.nodesource.com/setup_16.x | sudo -E bash -
          sudo yum install -y nodejs
          sudo yum install -y git
          git clone https://github.com/yipdinglong/CAD_Assignment.git
          cd CAD_Assignment
          sudo npm i
          sudo yum install -y mysql
          mysql -h ${MyDBInstance.Endpoint.Address} -u ${DBUsername} -p${DBPassword} < LostAndFound.sql
          RDSEndpoint="${MyDBInstance.Endpoint.Address}" Database="LostAndFound" Username="${DBUsername}" Password="${DBPassword}" TopicARN="${MySNSTopic}" AWS_REGION="${AWS::Region}" node server.js
      Tags:
        - Key: Name
          Value: MyEC2Instance

